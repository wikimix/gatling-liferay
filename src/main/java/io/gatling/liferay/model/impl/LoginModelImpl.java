/**
 * Copyright 2011-2016 GatlingCorp (http://gatling.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gatling.liferay.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;
import java.sql.Types;
import java.util.HashMap;
import java.util.Map;

import io.gatling.liferay.model.Login;
import io.gatling.liferay.model.LoginModel;

/**
 * The base model implementation for the Login service. Represents a row in the &quot;StressTool_Login&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link io.gatling.liferay.model.LoginModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoginImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LoginImpl
 * @see io.gatling.liferay.model.Login
 * @see io.gatling.liferay.model.LoginModel
 * @generated
 */
public class LoginModelImpl extends BaseModelImpl<Login> implements LoginModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a login model instance should use the {@link io.gatling.liferay.model.Login} interface instead.
     */
    public static final String TABLE_NAME = "StressTool_Login";
    public static final Object[][] TABLE_COLUMNS = {
            { "userId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "data_", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table StressTool_Login (userId LONG not null primary key,name VARCHAR(75) null,data_ VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table StressTool_Login";
    public static final String ORDER_BY_JPQL = " ORDER BY login.userId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY StressTool_Login.userId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.io.gatling.liferay.model.Login"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.io.gatling.liferay.model.Login"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.io.gatling.liferay.model.Login"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.io.gatling.liferay.model.Login"));
    private static ClassLoader _classLoader = Login.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Login.class };
    private long _userId;
    private String _userUuid;
    private String _name;
    private String _originalName;
    private String _data;
    private long _columnBitmask;
    private Login _escapedModel;

    public LoginModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _userId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setUserId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _userId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Login.class;
    }

    @Override
    public String getModelClassName() {
        return Login.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("userId", getUserId());
        attributes.put("name", getName());
        attributes.put("data", getData());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String data = (String) attributes.get("data");

        if (data != null) {
            setData(data);
        }
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @Override
    public String getData() {
        if (_data == null) {
            return StringPool.BLANK;
        } else {
            return _data;
        }
    }

    @Override
    public void setData(String data) {
        _data = data;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Login.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Login toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Login) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        LoginImpl loginImpl = new LoginImpl();

        loginImpl.setUserId(getUserId());
        loginImpl.setName(getName());
        loginImpl.setData(getData());

        loginImpl.resetOriginalValues();

        return loginImpl;
    }

    @Override
    public int compareTo(Login login) {
        long primaryKey = login.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Login)) {
            return false;
        }

        Login login = (Login) obj;

        long primaryKey = login.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LoginModelImpl loginModelImpl = this;

        loginModelImpl._originalName = loginModelImpl._name;

        loginModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Login> toCacheModel() {
        LoginCacheModel loginCacheModel = new LoginCacheModel();

        loginCacheModel.userId = getUserId();

        loginCacheModel.name = getName();

        String name = loginCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            loginCacheModel.name = null;
        }

        loginCacheModel.data = getData();

        String data = loginCacheModel.data;

        if ((data != null) && (data.length() == 0)) {
            loginCacheModel.data = null;
        }

        return loginCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{userId=");
        sb.append(getUserId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", data=");
        sb.append(getData());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("io.gatling.liferay.model.Login");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>data</column-name><column-value><![CDATA[");
        sb.append(getData());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
