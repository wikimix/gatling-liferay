/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package io.gatling.liferay.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import io.gatling.liferay.model.UrlSiteMap;
import io.gatling.liferay.model.UrlSiteMapModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UrlSiteMap service. Represents a row in the &quot;StressTool_UrlSiteMap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UrlSiteMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UrlSiteMapImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UrlSiteMapImpl
 * @see UrlSiteMap
 * @see UrlSiteMapModel
 * @generated
 */
@ProviderType
public class UrlSiteMapModelImpl extends BaseModelImpl<UrlSiteMap>
	implements UrlSiteMapModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a url site map model instance should use the {@link UrlSiteMap} interface instead.
	 */
	public static final String TABLE_NAME = "StressTool_UrlSiteMap";
	public static final Object[][] TABLE_COLUMNS = {
			{ "urlSiteMapId", Types.BIGINT },
			{ "siteMapId", Types.BIGINT },
			{ "group_", Types.VARCHAR },
			{ "friendlyUrl", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "weight", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("urlSiteMapId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("siteMapId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("friendlyUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("weight", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table StressTool_UrlSiteMap (urlSiteMapId LONG not null primary key,siteMapId LONG,group_ VARCHAR(75) null,friendlyUrl VARCHAR(75) null,url VARCHAR(75) null,weight INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table StressTool_UrlSiteMap";
	public static final String ORDER_BY_JPQL = " ORDER BY urlSiteMap.urlSiteMapId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY StressTool_UrlSiteMap.urlSiteMapId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.io.gatling.liferay.model.UrlSiteMap"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.io.gatling.liferay.model.UrlSiteMap"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.io.gatling.liferay.model.UrlSiteMap"),
			true);
	public static final long SITEMAPID_COLUMN_BITMASK = 1L;
	public static final long URLSITEMAPID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.io.gatling.liferay.model.UrlSiteMap"));

	public UrlSiteMapModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _urlSiteMapId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUrlSiteMapId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _urlSiteMapId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UrlSiteMap.class;
	}

	@Override
	public String getModelClassName() {
		return UrlSiteMap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("urlSiteMapId", getUrlSiteMapId());
		attributes.put("siteMapId", getSiteMapId());
		attributes.put("group", getGroup());
		attributes.put("friendlyUrl", getFriendlyUrl());
		attributes.put("url", getUrl());
		attributes.put("weight", getWeight());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long urlSiteMapId = (Long)attributes.get("urlSiteMapId");

		if (urlSiteMapId != null) {
			setUrlSiteMapId(urlSiteMapId);
		}

		Long siteMapId = (Long)attributes.get("siteMapId");

		if (siteMapId != null) {
			setSiteMapId(siteMapId);
		}

		String group = (String)attributes.get("group");

		if (group != null) {
			setGroup(group);
		}

		String friendlyUrl = (String)attributes.get("friendlyUrl");

		if (friendlyUrl != null) {
			setFriendlyUrl(friendlyUrl);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Integer weight = (Integer)attributes.get("weight");

		if (weight != null) {
			setWeight(weight);
		}
	}

	@Override
	public long getUrlSiteMapId() {
		return _urlSiteMapId;
	}

	@Override
	public void setUrlSiteMapId(long urlSiteMapId) {
		_urlSiteMapId = urlSiteMapId;
	}

	@Override
	public long getSiteMapId() {
		return _siteMapId;
	}

	@Override
	public void setSiteMapId(long siteMapId) {
		_columnBitmask |= SITEMAPID_COLUMN_BITMASK;

		if (!_setOriginalSiteMapId) {
			_setOriginalSiteMapId = true;

			_originalSiteMapId = _siteMapId;
		}

		_siteMapId = siteMapId;
	}

	public long getOriginalSiteMapId() {
		return _originalSiteMapId;
	}

	@Override
	public String getGroup() {
		if (_group == null) {
			return StringPool.BLANK;
		}
		else {
			return _group;
		}
	}

	@Override
	public void setGroup(String group) {
		_group = group;
	}

	@Override
	public String getFriendlyUrl() {
		if (_friendlyUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _friendlyUrl;
		}
	}

	@Override
	public void setFriendlyUrl(String friendlyUrl) {
		_friendlyUrl = friendlyUrl;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public int getWeight() {
		return _weight;
	}

	@Override
	public void setWeight(int weight) {
		_weight = weight;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UrlSiteMap.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UrlSiteMap toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UrlSiteMap)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UrlSiteMapImpl urlSiteMapImpl = new UrlSiteMapImpl();

		urlSiteMapImpl.setUrlSiteMapId(getUrlSiteMapId());
		urlSiteMapImpl.setSiteMapId(getSiteMapId());
		urlSiteMapImpl.setGroup(getGroup());
		urlSiteMapImpl.setFriendlyUrl(getFriendlyUrl());
		urlSiteMapImpl.setUrl(getUrl());
		urlSiteMapImpl.setWeight(getWeight());

		urlSiteMapImpl.resetOriginalValues();

		return urlSiteMapImpl;
	}

	@Override
	public int compareTo(UrlSiteMap urlSiteMap) {
		long primaryKey = urlSiteMap.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UrlSiteMap)) {
			return false;
		}

		UrlSiteMap urlSiteMap = (UrlSiteMap)obj;

		long primaryKey = urlSiteMap.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UrlSiteMapModelImpl urlSiteMapModelImpl = this;

		urlSiteMapModelImpl._originalSiteMapId = urlSiteMapModelImpl._siteMapId;

		urlSiteMapModelImpl._setOriginalSiteMapId = false;

		urlSiteMapModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UrlSiteMap> toCacheModel() {
		UrlSiteMapCacheModel urlSiteMapCacheModel = new UrlSiteMapCacheModel();

		urlSiteMapCacheModel.urlSiteMapId = getUrlSiteMapId();

		urlSiteMapCacheModel.siteMapId = getSiteMapId();

		urlSiteMapCacheModel.group = getGroup();

		String group = urlSiteMapCacheModel.group;

		if ((group != null) && (group.length() == 0)) {
			urlSiteMapCacheModel.group = null;
		}

		urlSiteMapCacheModel.friendlyUrl = getFriendlyUrl();

		String friendlyUrl = urlSiteMapCacheModel.friendlyUrl;

		if ((friendlyUrl != null) && (friendlyUrl.length() == 0)) {
			urlSiteMapCacheModel.friendlyUrl = null;
		}

		urlSiteMapCacheModel.url = getUrl();

		String url = urlSiteMapCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			urlSiteMapCacheModel.url = null;
		}

		urlSiteMapCacheModel.weight = getWeight();

		return urlSiteMapCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{urlSiteMapId=");
		sb.append(getUrlSiteMapId());
		sb.append(", siteMapId=");
		sb.append(getSiteMapId());
		sb.append(", group=");
		sb.append(getGroup());
		sb.append(", friendlyUrl=");
		sb.append(getFriendlyUrl());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", weight=");
		sb.append(getWeight());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("io.gatling.liferay.model.UrlSiteMap");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>urlSiteMapId</column-name><column-value><![CDATA[");
		sb.append(getUrlSiteMapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteMapId</column-name><column-value><![CDATA[");
		sb.append(getSiteMapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>group</column-name><column-value><![CDATA[");
		sb.append(getGroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>friendlyUrl</column-name><column-value><![CDATA[");
		sb.append(getFriendlyUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weight</column-name><column-value><![CDATA[");
		sb.append(getWeight());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UrlSiteMap.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UrlSiteMap.class
		};
	private long _urlSiteMapId;
	private long _siteMapId;
	private long _originalSiteMapId;
	private boolean _setOriginalSiteMapId;
	private String _group;
	private String _friendlyUrl;
	private String _url;
	private int _weight;
	private long _columnBitmask;
	private UrlSiteMap _escapedModel;
}