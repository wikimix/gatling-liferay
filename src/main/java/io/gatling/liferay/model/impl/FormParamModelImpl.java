/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package io.gatling.liferay.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import io.gatling.liferay.model.FormParam;
import io.gatling.liferay.model.FormParamModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FormParam service. Represents a row in the &quot;StressTool_FormParam&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FormParamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormParamImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FormParamImpl
 * @see FormParam
 * @see FormParamModel
 * @generated
 */
@ProviderType
public class FormParamModelImpl extends BaseModelImpl<FormParam>
	implements FormParamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a form param model instance should use the {@link FormParam} interface instead.
	 */
	public static final String TABLE_NAME = "StressTool_FormParam";
	public static final Object[][] TABLE_COLUMNS = {
			{ "formParamId", Types.BIGINT },
			{ "urlRecordId", Types.BIGINT },
			{ "data_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("formParamId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("urlRecordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table StressTool_FormParam (formParamId LONG not null primary key,urlRecordId LONG,data_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table StressTool_FormParam";
	public static final String ORDER_BY_JPQL = " ORDER BY formParam.formParamId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY StressTool_FormParam.formParamId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.io.gatling.liferay.model.FormParam"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.io.gatling.liferay.model.FormParam"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.io.gatling.liferay.model.FormParam"),
			true);
	public static final long URLRECORDID_COLUMN_BITMASK = 1L;
	public static final long FORMPARAMID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.io.gatling.liferay.model.FormParam"));

	public FormParamModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _formParamId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFormParamId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _formParamId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FormParam.class;
	}

	@Override
	public String getModelClassName() {
		return FormParam.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("formParamId", getFormParamId());
		attributes.put("urlRecordId", getUrlRecordId());
		attributes.put("data", getData());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long formParamId = (Long)attributes.get("formParamId");

		if (formParamId != null) {
			setFormParamId(formParamId);
		}

		Long urlRecordId = (Long)attributes.get("urlRecordId");

		if (urlRecordId != null) {
			setUrlRecordId(urlRecordId);
		}

		String data = (String)attributes.get("data");

		if (data != null) {
			setData(data);
		}
	}

	@Override
	public long getFormParamId() {
		return _formParamId;
	}

	@Override
	public void setFormParamId(long formParamId) {
		_formParamId = formParamId;
	}

	@Override
	public long getUrlRecordId() {
		return _urlRecordId;
	}

	@Override
	public void setUrlRecordId(long urlRecordId) {
		_columnBitmask |= URLRECORDID_COLUMN_BITMASK;

		if (!_setOriginalUrlRecordId) {
			_setOriginalUrlRecordId = true;

			_originalUrlRecordId = _urlRecordId;
		}

		_urlRecordId = urlRecordId;
	}

	public long getOriginalUrlRecordId() {
		return _originalUrlRecordId;
	}

	@Override
	public String getData() {
		if (_data == null) {
			return StringPool.BLANK;
		}
		else {
			return _data;
		}
	}

	@Override
	public void setData(String data) {
		_data = data;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FormParam.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FormParam toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FormParam)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FormParamImpl formParamImpl = new FormParamImpl();

		formParamImpl.setFormParamId(getFormParamId());
		formParamImpl.setUrlRecordId(getUrlRecordId());
		formParamImpl.setData(getData());

		formParamImpl.resetOriginalValues();

		return formParamImpl;
	}

	@Override
	public int compareTo(FormParam formParam) {
		long primaryKey = formParam.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FormParam)) {
			return false;
		}

		FormParam formParam = (FormParam)obj;

		long primaryKey = formParam.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FormParamModelImpl formParamModelImpl = this;

		formParamModelImpl._originalUrlRecordId = formParamModelImpl._urlRecordId;

		formParamModelImpl._setOriginalUrlRecordId = false;

		formParamModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FormParam> toCacheModel() {
		FormParamCacheModel formParamCacheModel = new FormParamCacheModel();

		formParamCacheModel.formParamId = getFormParamId();

		formParamCacheModel.urlRecordId = getUrlRecordId();

		formParamCacheModel.data = getData();

		String data = formParamCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			formParamCacheModel.data = null;
		}

		return formParamCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{formParamId=");
		sb.append(getFormParamId());
		sb.append(", urlRecordId=");
		sb.append(getUrlRecordId());
		sb.append(", data=");
		sb.append(getData());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("io.gatling.liferay.model.FormParam");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>formParamId</column-name><column-value><![CDATA[");
		sb.append(getFormParamId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urlRecordId</column-name><column-value><![CDATA[");
		sb.append(getUrlRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data</column-name><column-value><![CDATA[");
		sb.append(getData());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = FormParam.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			FormParam.class
		};
	private long _formParamId;
	private long _urlRecordId;
	private long _originalUrlRecordId;
	private boolean _setOriginalUrlRecordId;
	private String _data;
	private long _columnBitmask;
	private FormParam _escapedModel;
}